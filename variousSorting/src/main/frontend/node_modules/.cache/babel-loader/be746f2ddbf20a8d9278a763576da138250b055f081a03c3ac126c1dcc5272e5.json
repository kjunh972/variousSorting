{"ast":null,"code":"var _jsxFileName = \"/Users/kjunh972/project/jun/Spring/variousSorting/variousSorting/src/main/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortingVisualizer from './SortingVisualizer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');\n  const [showPopup, setShowPopup] = useState(true);\n  const [sortingSteps, setSortingSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n  useEffect(() => {\n    if (selectedAlgorithm && numbers.length > 0) {\n      const steps = generateSortingSteps(selectedAlgorithm, [...numbers]);\n      setSortingSteps(steps);\n      setCurrentStep(0);\n    }\n  }, [selectedAlgorithm, numbers]);\n  const generateSortingSteps = (algorithm, arr) => {\n    switch (algorithm) {\n      case '선택 정렬':\n        return selectionSort(arr);\n      case '삽입 정렬':\n        return insertionSort(arr);\n      case '버블 정렬':\n        return bubbleSort(arr);\n      case '병합 정렬':\n        return mergeSort(arr);\n      case '힙 정렬':\n        return heapSort(arr);\n      case '퀵 정렬':\n        return quickSort(arr);\n      case '트리 정렬':\n        return treeSort(arr);\n      case '팀 정렬':\n        return timSort(arr);\n      default:\n        return [];\n    }\n  };\n  const addNumber = num => {\n    setNumbers(prev => [...prev, num]);\n  };\n  const addRandomNumber = () => {\n    const randomNum = Math.floor(Math.random() * 100) + 1;\n    addNumber(randomNum);\n  };\n  const removeNumber = index => {\n    setNumbers(prev => prev.filter((_, i) => i !== index));\n  };\n  const resetSorting = () => {\n    setCurrentStep(0);\n    setSortingSteps([]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [showPopup && /*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n      onSelect: algorithm => {\n        setSelectedAlgorithm(algorithm);\n        setShowPopup(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), !showPopup && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"\\uC22B\\uC790 \\uC785\\uB825\",\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              addNumber(parseInt(e.target.value));\n              e.target.value = '';\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRandomNumber,\n          children: \"\\uB79C\\uB364 \\uC22B\\uC790 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-numbers\",\n        children: [\"\\uD604\\uC7AC \\uC22B\\uC790:\", numbers.map((num, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"number-tag\",\n          children: [num, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeNumber(index),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SortingVisualizer, {\n        algorithm: selectedAlgorithm,\n        steps: sortingSteps,\n        currentStep: currentStep,\n        setCurrentStep: setCurrentStep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetSorting,\n        children: \"\\uC815\\uB82C \\uB2E4\\uC2DC \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n// 정렬 알고리즘 구현\n_s(App, \"SjlfQ0xDGYJs0Di2zkAZgd7Y5Jo=\");\n_c = App;\nconst selectionSort = arr => {\n  const steps = [];\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      variables: {\n        i,\n        minIdx\n      },\n      description: `현재 인덱스 i=${i}에서 시작합니다. 최소값의 인덱스 minIdx=${minIdx}로 초기화합니다.`\n    });\n    for (let j = i + 1; j < n; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [minIdx, j],\n        variables: {\n          i,\n          j,\n          minIdx\n        },\n        description: `현재 값 arr[${j}]=${arr[j]}와 최소값 arr[${minIdx}]=${arr[minIdx]}를 비교합니다.`\n      });\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n        steps.push({\n          array: [...arr],\n          activeIndices: [minIdx],\n          variables: {\n            i,\n            j,\n            minIdx\n          },\n          description: `새로운 최소값을 찾았습니다. minIdx를 ${j}로 업데이트합니다.`\n        });\n      }\n    }\n    if (minIdx !== i) {\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, minIdx],\n        variables: {\n          i,\n          minIdx\n        },\n        description: `arr[${i}]와 arr[${minIdx}]의 위치를 교환합니다.`\n      });\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst insertionSort = arr => {\n  const steps = [];\n  const n = arr.length;\n  for (let i = 1; i < n; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      variables: {\n        i,\n        key,\n        j\n      },\n      description: `현재 키 값 key=${key}를 선택합니다. j=${j}부터 비교를 시작합니다.`\n    });\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        variables: {\n          i,\n          key,\n          j\n        },\n        description: `arr[${j}]=${arr[j]}를 오른쪽으로 이동합니다.`\n      });\n      j--;\n    }\n    arr[j + 1] = key;\n    steps.push({\n      array: [...arr],\n      activeIndices: [j + 1],\n      variables: {\n        i,\n        key,\n        j\n      },\n      description: `key=${key}를 arr[${j + 1}]에 삽입합니다.`\n    });\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst bubbleSort = arr => {\n  const steps = [];\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        variables: {\n          i,\n          j\n        },\n        description: `arr[${j}]=${arr[j]}와 arr[${j + 1}]=${arr[j + 1]}를 비교합니다.`\n      });\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j + 1],\n          variables: {\n            i,\n            j\n          },\n          description: `arr[${j}]와 arr[${j + 1}]의 위치를 교환합니다.`\n        });\n      }\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst mergeSort = arr => {\n  const steps = [];\n  const merge = (left, right) => {\n    let result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n      steps.push({\n        array: [...arr.slice(0, leftIndex + rightIndex), ...result, ...left.slice(leftIndex), ...right.slice(rightIndex)],\n        activeIndices: [leftIndex, rightIndex],\n        variables: {\n          leftIndex,\n          rightIndex\n        },\n        description: `왼쪽 배열의 ${leftIndex}번째 요소와 오른쪽 배열의 ${rightIndex}번째 요소를 비교하여 병합합니다.`\n      });\n    }\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n  const mergeSortRecursive = (arr, start, end) => {\n    if (start >= end) {\n      return [arr[start]];\n    }\n    const middle = Math.floor((start + end) / 2);\n    const left = mergeSortRecursive(arr, start, middle);\n    const right = mergeSortRecursive(arr, middle + 1, end);\n    steps.push({\n      array: [...arr],\n      activeIndices: [start, middle, end],\n      variables: {\n        start,\n        middle,\n        end\n      },\n      description: `배열을 ${start}부터 ${middle}까지의 왼쪽 부분과 ${middle + 1}부터 ${end}까지의 오른쪽 부분으로 나눕니다.`\n    });\n    return merge(left, right);\n  };\n  mergeSortRecursive(arr, 0, arr.length - 1);\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst heapSort = arr => {\n  const steps = [];\n  const heapify = (n, i) => {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n    if (left < n && arr[left] > arr[largest]) {\n      largest = left;\n    }\n    if (right < n && arr[right] > arr[largest]) {\n      largest = right;\n    }\n    if (largest !== i) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, largest],\n        variables: {\n          i,\n          largest\n        },\n        description: `노드 ${i}와 ${largest}를 비교하고 교환합니다.`\n      });\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      heapify(n, largest);\n    }\n  };\n  const n = arr.length;\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(n, i);\n  }\n  for (let i = n - 1; i > 0; i--) {\n    steps.push({\n      array: [...arr],\n      activeIndices: [0, i],\n      variables: {\n        i\n      },\n      description: `루트 노드와 마지막 노드를 교환합니다.`\n    });\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(i, 0);\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst quickSort = arr => {\n  const steps = [];\n  const partition = (low, high) => {\n    const pivot = arr[high];\n    let i = low - 1;\n    steps.push({\n      array: [...arr],\n      activeIndices: [high],\n      variables: {\n        pivot,\n        low,\n        high\n      },\n      description: `피벗을 ${pivot}으로 선택합니다. 낮은 인덱스: ${low}, 높은 인덱스: ${high}`\n    });\n    for (let j = low; j < high; j++) {\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, j],\n          variables: {\n            i,\n            j\n          },\n          description: `${arr[i]}와 ${arr[j]}를 교환합니다.`\n        });\n      }\n    }\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    steps.push({\n      array: [...arr],\n      activeIndices: [i + 1, high],\n      variables: {\n        i\n      },\n      description: `피벗을 올바른 위치로 이동합니다.`\n    });\n    return i + 1;\n  };\n  const quickSortRecursive = (low, high) => {\n    if (low < high) {\n      const pi = partition(low, high);\n      quickSortRecursive(low, pi - 1);\n      quickSortRecursive(pi + 1, high);\n    }\n  };\n  quickSortRecursive(0, arr.length - 1);\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst treeSort = arr => {\n  const steps = [];\n  class Node {\n    constructor(data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  const insert = (root, key) => {\n    if (root === null) {\n      root = new Node(key);\n      steps.push({\n        array: [...arr],\n        activeIndices: [arr.indexOf(key)],\n        variables: {\n          key\n        },\n        description: `${key}를 트리에 삽입합니다.`\n      });\n      return root;\n    }\n    if (key < root.data) {\n      root.left = insert(root.left, key);\n    } else if (key > root.data) {\n      root.right = insert(root.right, key);\n    }\n    return root;\n  };\n  const inorderTraversal = (root, result) => {\n    if (root !== null) {\n      inorderTraversal(root.left, result);\n      result.push(root.data);\n      steps.push({\n        array: [...result, ...arr.slice(result.length)],\n        activeIndices: [result.length - 1],\n        variables: {\n          current: root.data\n        },\n        description: `${root.data}를 결과 배열에 추가합니다.`\n      });\n      inorderTraversal(root.right, result);\n    }\n  };\n  let root = null;\n  for (let i = 0; i < arr.length; i++) {\n    root = insert(root, arr[i]);\n  }\n  const sortedArr = [];\n  inorderTraversal(root, sortedArr);\n  arr.splice(0, arr.length, ...sortedArr);\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst timSort = arr => {\n  const steps = [];\n  const RUN = 32;\n  const n = arr.length;\n  const insertionSort = (arr, left, right) => {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = arr[i];\n      let j = i - 1;\n      while (j >= left && arr[j] > temp) {\n        arr[j + 1] = arr[j];\n        j--;\n      }\n      arr[j + 1] = temp;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j + 1],\n        variables: {\n          i,\n          j,\n          temp\n        },\n        description: `${temp}를 ${j + 2}번째 위치에 삽입했습니다.`\n      });\n    }\n  };\n  const merge = (arr, l, m, r) => {\n    const len1 = m - l + 1,\n      len2 = r - m;\n    const left = new Array(len1),\n      right = new Array(len2);\n    for (let x = 0; x < len1; x++) {\n      left[x] = arr[l + x];\n    }\n    for (let x = 0; x < len2; x++) {\n      right[x] = arr[m + 1 + x];\n    }\n    let i = 0,\n      j = 0,\n      k = l;\n    while (i < len1 && j < len2) {\n      if (left[i] <= right[j]) {\n        arr[k] = left[i];\n        i++;\n      } else {\n        arr[k] = right[j];\n        j++;\n      }\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        variables: {\n          i,\n          j,\n          k\n        },\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      k++;\n    }\n    while (i < len1) {\n      arr[k] = left[i];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        variables: {\n          i,\n          k\n        },\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      i++;\n      k++;\n    }\n    while (j < len2) {\n      arr[k] = right[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        variables: {\n          j,\n          k\n        },\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      j++;\n      k++;\n    }\n  };\n  for (let i = 0; i < n; i += RUN) {\n    insertionSort(arr, i, Math.min(i + RUN - 1, n - 1));\n  }\n  for (let size = RUN; size < n; size = 2 * size) {\n    for (let start = 0; start < n; start += 2 * size) {\n      const mid = start + size - 1;\n      const end = Math.min(start + 2 * size - 1, n - 1);\n      merge(arr, start, mid, end);\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AlgorithmSelector","SortingVisualizer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedAlgorithm","setSelectedAlgorithm","showPopup","setShowPopup","sortingSteps","setSortingSteps","currentStep","setCurrentStep","numbers","setNumbers","length","steps","generateSortingSteps","algorithm","arr","selectionSort","insertionSort","bubbleSort","mergeSort","heapSort","quickSort","treeSort","timSort","addNumber","num","prev","addRandomNumber","randomNum","Math","floor","random","removeNumber","index","filter","_","i","resetSorting","className","children","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyPress","e","key","parseInt","target","value","onClick","map","_c","n","minIdx","push","array","activeIndices","variables","description","j","merge","left","right","result","leftIndex","rightIndex","slice","concat","mergeSortRecursive","start","end","middle","heapify","largest","partition","low","high","pivot","quickSortRecursive","pi","Node","constructor","data","insert","root","indexOf","inorderTraversal","current","sortedArr","splice","RUN","temp","l","m","r","len1","len2","Array","x","k","min","size","mid","$RefreshReg$"],"sources":["/Users/kjunh972/project/jun/Spring/variousSorting/variousSorting/src/main/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortingVisualizer from './SortingVisualizer';\nimport './App.css';\n\nconst App = () => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');\n  const [showPopup, setShowPopup] = useState(true);\n  const [sortingSteps, setSortingSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n\n  useEffect(() => {\n    if (selectedAlgorithm && numbers.length > 0) {\n      const steps = generateSortingSteps(selectedAlgorithm, [...numbers]);\n      setSortingSteps(steps);\n      setCurrentStep(0);\n    }\n  }, [selectedAlgorithm, numbers]);\n\n  const generateSortingSteps = (algorithm, arr) => {\n    switch (algorithm) {\n      case '선택 정렬': return selectionSort(arr);\n      case '삽입 정렬': return insertionSort(arr);\n      case '버블 정렬': return bubbleSort(arr);\n      case '병합 정렬': return mergeSort(arr);\n      case '힙 정렬': return heapSort(arr);\n      case '퀵 정렬': return quickSort(arr);\n      case '트리 정렬': return treeSort(arr);\n      case '팀 정렬': return timSort(arr);\n      default: return [];\n    }\n  };\n\n  const addNumber = (num) => {\n    setNumbers(prev => [...prev, num]);\n  };\n\n  const addRandomNumber = () => {\n    const randomNum = Math.floor(Math.random() * 100) + 1;\n    addNumber(randomNum);\n  };\n\n  const removeNumber = (index) => {\n    setNumbers(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const resetSorting = () => {\n    setCurrentStep(0);\n    setSortingSteps([]);\n  };\n\n  return (\n    <div className=\"app\">\n      {showPopup && (\n        <AlgorithmSelector\n          onSelect={(algorithm) => {\n            setSelectedAlgorithm(algorithm);\n            setShowPopup(false);\n          }}\n        />\n      )}\n      {!showPopup && (\n        <>\n          <div className=\"number-input\">\n            <input\n              type=\"number\"\n              placeholder=\"숫자 입력\"\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  addNumber(parseInt(e.target.value));\n                  e.target.value = '';\n                }\n              }}\n            />\n            <button onClick={addRandomNumber}>랜덤 숫자 추가</button>\n          </div>\n          <div className=\"current-numbers\">\n            현재 숫자:\n            {numbers.map((num, index) => (\n              <span key={index} className=\"number-tag\">\n                {num}\n                <button onClick={() => removeNumber(index)}>×</button>\n              </span>\n            ))}\n          </div>\n          <SortingVisualizer\n            algorithm={selectedAlgorithm}\n            steps={sortingSteps}\n            currentStep={currentStep}\n            setCurrentStep={setCurrentStep}\n          />\n          <button className=\"reset-button\" onClick={resetSorting}>정렬 다시 시작</button>\n        </>\n      )}\n    </div>\n  );\n};\n\n// 정렬 알고리즘 구현\nconst selectionSort = (arr) => {\n  const steps = [];\n  const n = arr.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      variables: { i, minIdx },\n      description: `현재 인덱스 i=${i}에서 시작합니다. 최소값의 인덱스 minIdx=${minIdx}로 초기화합니다.`\n    });\n\n    for (let j = i + 1; j < n; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [minIdx, j],\n        variables: { i, j, minIdx },\n        description: `현재 값 arr[${j}]=${arr[j]}와 최소값 arr[${minIdx}]=${arr[minIdx]}를 비교합니다.`\n      });\n\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n        steps.push({\n          array: [...arr],\n          activeIndices: [minIdx],\n          variables: { i, j, minIdx },\n          description: `새로운 최소값을 찾았습니다. minIdx를 ${j}로 업데이트합니다.`\n        });\n      }\n    }\n\n    if (minIdx !== i) {\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, minIdx],\n        variables: { i, minIdx },\n        description: `arr[${i}]와 arr[${minIdx}]의 위치를 교환합니다.`\n      });\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst insertionSort = (arr) => {\n  const steps = [];\n  const n = arr.length;\n\n  for (let i = 1; i < n; i++) {\n    let key = arr[i];\n    let j = i - 1;\n\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      variables: { i, key, j },\n      description: `현재 키 값 key=${key}를 선택합니다. j=${j}부터 비교를 시작합니다.`\n    });\n\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        variables: { i, key, j },\n        description: `arr[${j}]=${arr[j]}를 오른쪽으로 이동합니다.`\n      });\n      j--;\n    }\n\n    arr[j + 1] = key;\n    steps.push({\n      array: [...arr],\n      activeIndices: [j + 1],\n      variables: { i, key, j },\n      description: `key=${key}를 arr[${j + 1}]에 삽입합니다.`\n    });\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst bubbleSort = (arr) => {\n  const steps = [];\n  const n = arr.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        variables: { i, j },\n        description: `arr[${j}]=${arr[j]}와 arr[${j + 1}]=${arr[j + 1]}를 비교합니다.`\n      });\n\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j + 1],\n          variables: { i, j },\n          description: `arr[${j}]와 arr[${j + 1}]의 위치를 교환합니다.`\n        });\n      }\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst mergeSort = (arr) => {\n  const steps = [];\n\n  const merge = (left, right) => {\n    let result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n      steps.push({\n        array: [...arr.slice(0, leftIndex + rightIndex), ...result, ...left.slice(leftIndex), ...right.slice(rightIndex)],\n        activeIndices: [leftIndex, rightIndex],\n        variables: { leftIndex, rightIndex },\n        description: `왼쪽 배열의 ${leftIndex}번째 요소와 오른쪽 배열의 ${rightIndex}번째 요소를 비교하여 병합합니다.`\n      });\n    }\n\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n\n  const mergeSortRecursive = (arr, start, end) => {\n    if (start >= end) {\n      return [arr[start]];\n    }\n\n    const middle = Math.floor((start + end) / 2);\n    const left = mergeSortRecursive(arr, start, middle);\n    const right = mergeSortRecursive(arr, middle + 1, end);\n\n    steps.push({\n      array: [...arr],\n      activeIndices: [start, middle, end],\n      variables: { start, middle, end },\n      description: `배열을 ${start}부터 ${middle}까지의 왼쪽 부분과 ${middle + 1}부터 ${end}까지의 오른쪽 부분으로 나눕니다.`\n    });\n\n    return merge(left, right);\n  };\n\n  mergeSortRecursive(arr, 0, arr.length - 1);\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst heapSort = (arr) => {\n  const steps = [];\n\n  const heapify = (n, i) => {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest]) {\n      largest = left;\n    }\n\n    if (right < n && arr[right] > arr[largest]) {\n      largest = right;\n    }\n\n    if (largest !== i) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, largest],\n        variables: { i, largest },\n        description: `노드 ${i}와 ${largest}를 비교하고 교환합니다.`\n      });\n\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      heapify(n, largest);\n    }\n  };\n\n  const n = arr.length;\n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(n, i);\n  }\n\n  for (let i = n - 1; i > 0; i--) {\n    steps.push({\n      array: [...arr],\n      activeIndices: [0, i],\n      variables: { i },\n      description: `루트 노드와 마지막 노드를 교환합니다.`\n    });\n\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(i, 0);\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst quickSort = (arr) => {\n  const steps = [];\n\n  const partition = (low, high) => {\n    const pivot = arr[high];\n    let i = low - 1;\n\n    steps.push({\n      array: [...arr],\n      activeIndices: [high],\n      variables: { pivot, low, high },\n      description: `피벗을 ${pivot}으로 선택합니다. 낮은 인덱스: ${low}, 높은 인덱스: ${high}`\n    });\n\n    for (let j = low; j < high; j++) {\n      if (arr[j] < pivot) {\n        i++;\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, j],\n          variables: { i, j },\n          description: `${arr[i]}와 ${arr[j]}를 교환합니다.`\n        });\n      }\n    }\n\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    steps.push({\n      array: [...arr],\n      activeIndices: [i + 1, high],\n      variables: { i },\n      description: `피벗을 올바른 위치로 이동합니다.`\n    });\n\n    return i + 1;\n  };\n\n  const quickSortRecursive = (low, high) => {\n    if (low < high) {\n      const pi = partition(low, high);\n      quickSortRecursive(low, pi - 1);\n      quickSortRecursive(pi + 1, high);\n    }\n  };\n\n  quickSortRecursive(0, arr.length - 1);\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst treeSort = (arr) => {\n  const steps = [];\n\n  class Node {\n    constructor(data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n    }\n  }\n\n  const insert = (root, key) => {\n    if (root === null) {\n      root = new Node(key);\n      steps.push({\n        array: [...arr],\n        activeIndices: [arr.indexOf(key)],\n        variables: { key },\n        description: `${key}를 트리에 삽입합니다.`\n      });\n      return root;\n    }\n\n    if (key < root.data) {\n      root.left = insert(root.left, key);\n    } else if (key > root.data) {\n      root.right = insert(root.right, key);\n    }\n\n    return root;\n  };\n\n  const inorderTraversal = (root, result) => {\n    if (root !== null) {\n      inorderTraversal(root.left, result);\n      result.push(root.data);\n      steps.push({\n        array: [...result, ...arr.slice(result.length)],\n        activeIndices: [result.length - 1],\n        variables: { current: root.data },\n        description: `${root.data}를 결과 배열에 추가합니다.`\n      });\n      inorderTraversal(root.right, result);\n    }\n  };\n\n  let root = null;\n  for (let i = 0; i < arr.length; i++) {\n    root = insert(root, arr[i]);\n  }\n\n  const sortedArr = [];\n  inorderTraversal(root, sortedArr);\n\n  arr.splice(0, arr.length, ...sortedArr);\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst timSort = (arr) => {\n  const steps = [];\n  const RUN = 32;\n  const n = arr.length;\n\n  const insertionSort = (arr, left, right) => {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = arr[i];\n      let j = i - 1;\n      while (j >= left && arr[j] > temp) {\n        arr[j + 1] = arr[j];\n        j--;\n      }\n      arr[j + 1] = temp;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j + 1],\n        variables: { i, j, temp },\n        description: `${temp}를 ${j + 2}번째 위치에 삽입했습니다.`\n      });\n    }\n  };\n\n  const merge = (arr, l, m, r) => {\n    const len1 = m - l + 1, len2 = r - m;\n    const left = new Array(len1), right = new Array(len2);\n    for (let x = 0; x < len1; x++) {\n      left[x] = arr[l + x];\n    }\n    for (let x = 0; x < len2; x++) {\n      right[x] = arr[m + 1 + x];\n    }\n\n    let i = 0, j = 0, k = l;\n\n    while (i < len1 && j < len2) {\n      if (left[i] <= right[j]) {\n        arr[k] = left[i];\n        i++;\n      } else {\n        arr[k] = right[j];\n        j++;\n      }\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        variables: { i, j, k },\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      k++;\n    }\n\n    while (i < len1) {\n      arr[k] = left[i];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        variables: { i, k },\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      i++;\n      k++;\n    }\n\n    while (j < len2) {\n      arr[k] = right[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        variables: { j, k },\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      j++;\n      k++;\n    }\n  };\n\n  for (let i = 0; i < n; i += RUN) {\n    insertionSort(arr, i, Math.min((i + RUN - 1), (n - 1)));\n  }\n\n  for (let size = RUN; size < n; size = 2 * size) {\n    for (let start = 0; start < n; start += 2 * size) {\n      const mid = start + size - 1;\n      const end = Math.min((start + 2 * size - 1), (n - 1));\n      merge(arr, start, mid, end);\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    variables: {},\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}