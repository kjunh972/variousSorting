{"ast":null,"code":"var _jsxFileName = \"/Users/kjunh972/project/jun/Spring/variousSorting/variousSorting/src/main/frontend/src/App.js\",\n  _s = $RefreshSig$();\n// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortingVisualizer from './SortingVisualizer';\nimport { generateSortingSteps } from './sortingAlgorithms';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst variableDescriptions = {\n  i: \"현재 기준 인덱스\",\n  j: \"비교 대상 인덱스\",\n  key: \"삽입할 현재 값\",\n  minIdx: \"현재까지의 최소값 인덱스\",\n  pivot: \"퀵정렬의 기준값\",\n  left: \"왼쪽 포인터\",\n  right: \"오른쪽 포인터\",\n  mid: \"중간 인덱스\",\n  temp: \"임시 저장 변수\",\n  len1: \"왼쪽 부분 배열의 길이\",\n  len2: \"오른쪽 부분 배열의 길이\",\n  k: \"병합 시 현재 위치\",\n  x: \"임시 인덱스\",\n  size: \"현재 부분 배열의 크기\",\n  start: \"현재 부분 배열의 시작 인덱스\",\n  end: \"현재 부분 배열의 끝 인덱스\",\n  RUN: \"팀정렬의 초기 런 크기\"\n};\nconst SortingSteps = {\n  '선택 정렬': \"배열을 순회하면서 가장 작은 원소를 찾아 맨 앞으로 이동시키는 방식으로 정렬합니다.\",\n  '삽입 정렬': \"배열의 각 원소를 이미 정렬된 부분 배열의 적절한 위치에 삽입하여 정렬합니다.\",\n  '버블 정렬': \"인접한 두 원소를 비교하여 큰 값을 뒤로 보내는 과정을 반복하여 정렬합니다.\",\n  '병합 정렬': \"배열을 반으로 나누고, 각 부분을 정렬한 후 병합하는 과정을 재귀적으로 수행합니다.\",\n  '힙 정렬': \"배열을 최대 힙으로 구성한 후, 루트 노드와 마지막 노드를 교환하며 정렬합니다.\",\n  '퀵 정렬': \"피벗을 선택하고 피벗보다 작은 값과 큰 값을 분할한 후, 각 부분을 재귀적으로 정렬합니다.\",\n  '트리 정렬': \"이진 탐색 트리를 구성하고 중위 순회하여 정렬된 결과를 얻습니다.\",\n  '팀 정렬': \"작은 부분 배열에는 삽입 정렬을, 큰 부분 배열에는 병합 정렬을 사용하는 하이브리드 정렬 알고리즘입니다.\"\n};\nconst App = () => {\n  _s();\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');\n  const [showPopup, setShowPopup] = useState(true);\n  const [sortingSteps, setSortingSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n  useEffect(() => {\n    if (selectedAlgorithm && numbers.length > 0) {\n      const steps = generateSortingSteps(selectedAlgorithm, [...numbers]);\n      setSortingSteps(steps);\n      setCurrentStep(0);\n    }\n  }, [selectedAlgorithm, numbers]);\n  const addNumber = num => {\n    if (!isNaN(num) && num !== '') {\n      setNumbers(prev => [...prev, parseInt(num)]);\n    }\n  };\n  const addRandomNumber = () => {\n    const randomNum = Math.floor(Math.random() * 100) + 1;\n    addNumber(randomNum);\n  };\n  const removeNumber = index => {\n    setNumbers(prev => prev.filter((_, i) => i !== index));\n  };\n  const resetAlgorithm = () => {\n    setShowPopup(true);\n    setSelectedAlgorithm('');\n    setSortingSteps([]);\n    setCurrentStep(0);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [showPopup && /*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n      onSelect: algorithm => {\n        setSelectedAlgorithm(algorithm);\n        setShowPopup(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), !showPopup && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"\\uC22B\\uC790 \\uC785\\uB825\",\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              addNumber(e.target.value);\n              e.target.value = '';\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRandomNumber,\n          children: \"\\uB79C\\uB364 \\uC22B\\uC790 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-numbers\",\n        children: [\"\\uD604\\uC7AC \\uC22B\\uC790:\", numbers.map((num, index) => /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"number-tag\",\n          children: [num, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => removeNumber(index),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SortingVisualizer, {\n        algorithm: selectedAlgorithm,\n        steps: sortingSteps,\n        currentStep: currentStep,\n        setCurrentStep: setCurrentStep,\n        variableDescriptions: variableDescriptions,\n        SortingSteps: SortingSteps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"reset-button\",\n        onClick: resetAlgorithm,\n        children: \"\\uC815\\uB82C \\uB2E4\\uC2DC \\uC120\\uD0DD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"SjlfQ0xDGYJs0Di2zkAZgd7Y5Jo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AlgorithmSelector","SortingVisualizer","generateSortingSteps","jsxDEV","_jsxDEV","Fragment","_Fragment","variableDescriptions","i","j","key","minIdx","pivot","left","right","mid","temp","len1","len2","k","x","size","start","end","RUN","SortingSteps","App","_s","selectedAlgorithm","setSelectedAlgorithm","showPopup","setShowPopup","sortingSteps","setSortingSteps","currentStep","setCurrentStep","numbers","setNumbers","length","steps","addNumber","num","isNaN","prev","parseInt","addRandomNumber","randomNum","Math","floor","random","removeNumber","index","filter","_","resetAlgorithm","className","children","onSelect","algorithm","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyPress","e","target","value","onClick","map","_c","$RefreshReg$"],"sources":["/Users/kjunh972/project/jun/Spring/variousSorting/variousSorting/src/main/frontend/src/App.js"],"sourcesContent":["// App.js\n\nimport React, { useState, useEffect } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortingVisualizer from './SortingVisualizer';\nimport { generateSortingSteps } from './sortingAlgorithms';\nimport './App.css';\n\nconst variableDescriptions = {\n  i: \"현재 기준 인덱스\",\n  j: \"비교 대상 인덱스\",\n  key: \"삽입할 현재 값\",\n  minIdx: \"현재까지의 최소값 인덱스\",\n  pivot: \"퀵정렬의 기준값\",\n  left: \"왼쪽 포인터\",\n  right: \"오른쪽 포인터\",\n  mid: \"중간 인덱스\",\n  temp: \"임시 저장 변수\",\n  len1: \"왼쪽 부분 배열의 길이\",\n  len2: \"오른쪽 부분 배열의 길이\",\n  k: \"병합 시 현재 위치\",\n  x: \"임시 인덱스\",\n  size: \"현재 부분 배열의 크기\",\n  start: \"현재 부분 배열의 시작 인덱스\",\n  end: \"현재 부분 배열의 끝 인덱스\",\n  RUN: \"팀정렬의 초기 런 크기\"\n};\n\nconst SortingSteps = {\n  '선택 정렬': \"배열을 순회하면서 가장 작은 원소를 찾아 맨 앞으로 이동시키는 방식으로 정렬합니다.\",\n  '삽입 정렬': \"배열의 각 원소를 이미 정렬된 부분 배열의 적절한 위치에 삽입하여 정렬합니다.\",\n  '버블 정렬': \"인접한 두 원소를 비교하여 큰 값을 뒤로 보내는 과정을 반복하여 정렬합니다.\",\n  '병합 정렬': \"배열을 반으로 나누고, 각 부분을 정렬한 후 병합하는 과정을 재귀적으로 수행합니다.\",\n  '힙 정렬': \"배열을 최대 힙으로 구성한 후, 루트 노드와 마지막 노드를 교환하며 정렬합니다.\",\n  '퀵 정렬': \"피벗을 선택하고 피벗보다 작은 값과 큰 값을 분할한 후, 각 부분을 재귀적으로 정렬합니다.\",\n  '트리 정렬': \"이진 탐색 트리를 구성하고 중위 순회하여 정렬된 결과를 얻습니다.\",\n  '팀 정렬': \"작은 부분 배열에는 삽입 정렬을, 큰 부분 배열에는 병합 정렬을 사용하는 하이브리드 정렬 알고리즘입니다.\"\n};\n\nconst App = () => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');\n  const [showPopup, setShowPopup] = useState(true);\n  const [sortingSteps, setSortingSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n\n  useEffect(() => {\n    if (selectedAlgorithm && numbers.length > 0) {\n      const steps = generateSortingSteps(selectedAlgorithm, [...numbers]);\n      setSortingSteps(steps);\n      setCurrentStep(0);\n    }\n  }, [selectedAlgorithm, numbers]);\n\n  const addNumber = (num) => {\n    if (!isNaN(num) && num !== '') {\n      setNumbers(prev => [...prev, parseInt(num)]);\n    }\n  };\n\n  const addRandomNumber = () => {\n    const randomNum = Math.floor(Math.random() * 100) + 1;\n    addNumber(randomNum);\n  };\n\n  const removeNumber = (index) => {\n    setNumbers(prev => prev.filter((_, i) => i !== index));\n  };\n\n  const resetAlgorithm = () => {\n    setShowPopup(true);\n    setSelectedAlgorithm('');\n    setSortingSteps([]);\n    setCurrentStep(0);\n  };\n\n  return (\n    <div className=\"app\">\n      {showPopup && (\n        <AlgorithmSelector\n          onSelect={(algorithm) => {\n            setSelectedAlgorithm(algorithm);\n            setShowPopup(false);\n          }}\n        />\n      )}\n      {!showPopup && (\n        <>\n          <div className=\"number-input\">\n            <input\n              type=\"number\"\n              placeholder=\"숫자 입력\"\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  addNumber(e.target.value);\n                  e.target.value = '';\n                }\n              }}\n            />\n            <button onClick={addRandomNumber}>랜덤 숫자 추가</button>\n          </div>\n          <div className=\"current-numbers\">\n            현재 숫자:\n            {numbers.map((num, index) => (\n              <span key={index} className=\"number-tag\">\n                {num}\n                <button onClick={() => removeNumber(index)}>×</button>\n              </span>\n            ))}\n          </div>\n          <SortingVisualizer\n            algorithm={selectedAlgorithm}\n            steps={sortingSteps}\n            currentStep={currentStep}\n            setCurrentStep={setCurrentStep}\n            variableDescriptions={variableDescriptions}\n            SortingSteps={SortingSteps}\n          />\n          <button className=\"reset-button\" onClick={resetAlgorithm}>정렬 다시 선택</button>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}