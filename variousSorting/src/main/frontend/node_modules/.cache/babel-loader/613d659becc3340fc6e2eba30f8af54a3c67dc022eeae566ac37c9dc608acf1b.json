{"ast":null,"code":"var _jsxFileName = \"/Users/kjunh972/project/jun/Spring/variousSorting/src/main/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // 상태 변수들을 선언합니다\n  const [algorithm, setAlgorithm] = useState(''); // 선택된 정렬 알고리즘\n  const [numbers, setNumbers] = useState([]); // 정렬할 숫자 배열\n  const [currentNumber, setCurrentNumber] = useState(''); // 현재 입력 중인 숫자\n  const [sortingSteps, setSortingSteps] = useState([]); // 정렬 과정의 각 단계\n  const [currentStep, setCurrentStep] = useState(0); // 현재 보여주고 있는 정렬 단계\n\n  // 알고리즘이 선택되면 초기 배열을 생성합니다\n  useEffect(() => {\n    if (algorithm) {\n      const initialArray = Array.from({\n        length: 10\n      }, () => Math.floor(Math.random() * 100));\n      setNumbers(initialArray);\n      setSortingSteps([initialArray]);\n    }\n  }, [algorithm]);\n\n  // 숫자를 배열에 추가하는 함수\n  const addNumber = () => {\n    if (currentNumber && !isNaN(currentNumber)) {\n      const newNumbers = [...numbers, parseInt(currentNumber)];\n      setNumbers(newNumbers);\n      setSortingSteps([newNumbers]);\n      setCurrentNumber(''); // 입력 필드 초기화\n      setCurrentStep(0);\n    }\n  };\n\n  // 배열에서 숫자를 제거하는 함수\n  const removeNumber = index => {\n    const newNumbers = numbers.filter((_, i) => i !== index);\n    setNumbers(newNumbers);\n    setSortingSteps([newNumbers]);\n    setCurrentStep(0);\n  };\n\n  // 정렬을 시작하는 함수\n  const startSorting = async () => {\n    try {\n      console.log('Sorting started:', algorithm, numbers);\n      const response = await axios.post(`/api/sorting/${algorithm}`, numbers);\n      console.log('Sorting response:', response.data);\n      setSortingSteps(response.data);\n      setCurrentStep(0); // 첫 번째 단계부터 보여줌\n    } catch (error) {\n      console.error('Sorting error:', error);\n      alert('정렬 중 오류가 발생했습니다: ' + error.message);\n    }\n  };\n\n  // 다음 정렬 단계로 이동하는 함수\n  const nextStep = () => {\n    if (currentStep < sortingSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  // 이전 정렬 단계로 이동하는 함수\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  // 알고리즘에 따른 시각화 컴포넌트\n  const VisualizationComponent = () => {\n    if (!algorithm) return null;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"visualization\",\n      children: sortingSteps[currentStep] && sortingSteps[currentStep].map((num, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bar\",\n        style: {\n          height: `${num * 3}px`\n        },\n        onClick: () => removeNumber(index),\n        children: num\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uC815\\uB82C \\uC54C\\uACE0\\uB9AC\\uC998 \\uC2DC\\uAC01\\uD654\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), !algorithm ?\n    /*#__PURE__*/\n    // 알고리즘 선택 화면\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uC815\\uB82C \\uC54C\\uACE0\\uB9AC\\uC998\\uC744 \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setAlgorithm('selection'),\n        children: \"\\uC120\\uD0DD \\uC815\\uB82C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setAlgorithm('insertion'),\n        children: \"\\uC0BD\\uC785 \\uC815\\uB82C\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // 선택된 알고리즘에 대한 시각화 화면\n    _jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: algorithm === 'selection' ? '선택 정렬' : '삽입 정렬'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(VisualizationComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: currentNumber,\n          onChange: e => setCurrentNumber(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addNumber,\n          children: \"\\uC22B\\uC790 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startSorting,\n        children: \"\\uC815\\uB82C \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: prevStep,\n        disabled: currentStep === 0,\n        children: \"\\uC774\\uC804 \\uB2E8\\uACC4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: nextStep,\n        disabled: currentStep === sortingSteps.length - 1,\n        children: \"\\uB2E4\\uC74C \\uB2E8\\uACC4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"oEuBkg6erXcRI7ZBRWrIJ1AO8QE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","App","_s","algorithm","setAlgorithm","numbers","setNumbers","currentNumber","setCurrentNumber","sortingSteps","setSortingSteps","currentStep","setCurrentStep","initialArray","Array","from","length","Math","floor","random","addNumber","isNaN","newNumbers","parseInt","removeNumber","index","filter","_","i","startSorting","console","log","response","post","data","error","alert","message","nextStep","prevStep","VisualizationComponent","className","children","map","num","style","height","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","disabled","_c","$RefreshReg$"],"sources":["/Users/kjunh972/project/jun/Spring/variousSorting/src/main/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  // 상태 변수들을 선언합니다\n  const [algorithm, setAlgorithm] = useState(''); // 선택된 정렬 알고리즘\n  const [numbers, setNumbers] = useState([]); // 정렬할 숫자 배열\n  const [currentNumber, setCurrentNumber] = useState(''); // 현재 입력 중인 숫자\n  const [sortingSteps, setSortingSteps] = useState([]); // 정렬 과정의 각 단계\n  const [currentStep, setCurrentStep] = useState(0); // 현재 보여주고 있는 정렬 단계\n\n  // 알고리즘이 선택되면 초기 배열을 생성합니다\n  useEffect(() => {\n    if (algorithm) {\n      const initialArray = Array.from({length: 10}, () => Math.floor(Math.random() * 100));\n      setNumbers(initialArray);\n      setSortingSteps([initialArray]);\n    }\n  }, [algorithm]);\n\n  // 숫자를 배열에 추가하는 함수\n  const addNumber = () => {\n    if (currentNumber && !isNaN(currentNumber)) {\n      const newNumbers = [...numbers, parseInt(currentNumber)];\n      setNumbers(newNumbers);\n      setSortingSteps([newNumbers]);\n      setCurrentNumber(''); // 입력 필드 초기화\n      setCurrentStep(0);\n    }\n  };\n\n  // 배열에서 숫자를 제거하는 함수\n  const removeNumber = (index) => {\n    const newNumbers = numbers.filter((_, i) => i !== index);\n    setNumbers(newNumbers);\n    setSortingSteps([newNumbers]);\n    setCurrentStep(0);\n  };\n\n  // 정렬을 시작하는 함수\n    const startSorting = async () => {\n      try {\n        console.log('Sorting started:', algorithm, numbers);\n        const response = await axios.post(`/api/sorting/${algorithm}`, numbers);\n        console.log('Sorting response:', response.data);\n        setSortingSteps(response.data);\n        setCurrentStep(0); // 첫 번째 단계부터 보여줌\n      } catch (error) {\n        console.error('Sorting error:', error);\n        alert('정렬 중 오류가 발생했습니다: ' + error.message);\n      }\n    };\n\n  // 다음 정렬 단계로 이동하는 함수\n  const nextStep = () => {\n    if (currentStep < sortingSteps.length - 1) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  // 이전 정렬 단계로 이동하는 함수\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  // 알고리즘에 따른 시각화 컴포넌트\n  const VisualizationComponent = () => {\n    if (!algorithm) return null;\n\n    return (\n      <div className=\"visualization\">\n        {sortingSteps[currentStep] && sortingSteps[currentStep].map((num, index) => (\n          <div\n            key={index}\n            className=\"bar\"\n            style={{height: `${num * 3}px`}}\n            onClick={() => removeNumber(index)}\n          >\n            {num}\n          </div>\n        ))}\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>정렬 알고리즘 시각화</h1>\n      {!algorithm ? (\n        // 알고리즘 선택 화면\n        <div>\n          <h2>정렬 알고리즘을 선택하세요</h2>\n          <button onClick={() => setAlgorithm('selection')}>선택 정렬</button>\n          <button onClick={() => setAlgorithm('insertion')}>삽입 정렬</button>\n          {/* 여기에 다른 정렬 알고리즘 버튼들을 추가할 수 있습니다 */}\n        </div>\n      ) : (\n        // 선택된 알고리즘에 대한 시각화 화면\n        <div>\n          <h2>{algorithm === 'selection' ? '선택 정렬' : '삽입 정렬'}</h2>\n          <VisualizationComponent />\n          <div>\n            <input\n              type=\"number\"\n              value={currentNumber}\n              onChange={(e) => setCurrentNumber(e.target.value)}\n            />\n            <button onClick={addNumber}>숫자 추가</button>\n          </div>\n          <button onClick={startSorting}>정렬 시작</button>\n          <button onClick={prevStep} disabled={currentStep === 0}>이전 단계</button>\n          <button onClick={nextStep} disabled={currentStep === sortingSteps.length - 1}>다음 단계</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}