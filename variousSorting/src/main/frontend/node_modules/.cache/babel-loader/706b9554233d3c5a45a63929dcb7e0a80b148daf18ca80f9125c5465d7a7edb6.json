{"ast":null,"code":"var _jsxFileName = \"/Users/kjunh972/project/jun/Spring/variousSorting/variousSorting/src/main/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortingVisualizer from './SortingVisualizer';\nimport './App.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');\n  const [showPopup, setShowPopup] = useState(true);\n  const [sortingSteps, setSortingSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n  useEffect(() => {\n    if (selectedAlgorithm && numbers.length > 0) {\n      const steps = generateSortingSteps(selectedAlgorithm, [...numbers]);\n      setSortingSteps(steps);\n      setCurrentStep(0);\n    }\n  }, [selectedAlgorithm, numbers]);\n  const generateSortingSteps = (algorithm, arr) => {\n    switch (algorithm) {\n      case '선택 정렬':\n        return selectionSort(arr);\n      case '삽입 정렬':\n        return insertionSort(arr);\n      case '버블 정렬':\n        return bubbleSort(arr);\n      case '병합 정렬':\n        return mergeSort(arr);\n      case '힙 정렬':\n        return heapSort(arr);\n      case '퀵 정렬':\n        return quickSort(arr);\n      case '트리 정렬':\n        return treeSort(arr);\n      case '팀 정렬':\n        return timSort(arr);\n      default:\n        return [];\n    }\n  };\n  const addNumber = num => {\n    setNumbers(prev => [...prev, num]);\n  };\n  const addRandomNumber = () => {\n    const randomNum = Math.floor(Math.random() * 100) + 1;\n    addNumber(randomNum);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: [showPopup && /*#__PURE__*/_jsxDEV(AlgorithmSelector, {\n      onSelect: algorithm => {\n        setSelectedAlgorithm(algorithm);\n        setShowPopup(false);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), !showPopup && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-input\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"\\uC22B\\uC790 \\uC785\\uB825\",\n          onKeyPress: e => {\n            if (e.key === 'Enter') {\n              addNumber(parseInt(e.target.value));\n              e.target.value = '';\n            }\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addRandomNumber,\n          children: \"\\uB79C\\uB364 \\uC22B\\uC790 \\uCD94\\uAC00\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"current-numbers\",\n        children: [\"\\uD604\\uC7AC \\uC22B\\uC790: \", numbers.join(', ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(SortingVisualizer, {\n        algorithm: selectedAlgorithm,\n        steps: sortingSteps,\n        currentStep: currentStep,\n        setCurrentStep: setCurrentStep\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n\n// 정렬 알고리즘 구현\n_s(App, \"SjlfQ0xDGYJs0Di2zkAZgd7Y5Jo=\");\n_c = App;\nconst selectionSort = arr => {\n  const steps = [];\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      description: `${i + 1}번째 위치의 최소값을 찾기 시작합니다.`\n    });\n    for (let j = i + 1; j < n; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [minIdx, j],\n        description: `${minIdx + 1}번째 값(${arr[minIdx]})과 ${j + 1}번째 값(${arr[j]})을 비교합니다.`\n      });\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n        steps.push({\n          array: [...arr],\n          activeIndices: [minIdx],\n          description: `새로운 최소값 ${arr[minIdx]}을 ${minIdx + 1}번째 위치에서 찾았습니다.`\n        });\n      }\n    }\n    if (minIdx !== i) {\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, minIdx],\n        description: `${i + 1}번째 값과 ${minIdx + 1}번째 값을 교환했습니다.`\n      });\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst insertionSort = arr => {\n  const steps = [];\n  const n = arr.length;\n  for (let i = 1; i < n; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      description: `${i + 1}번째 값 ${key}를 정렬된 부분에 삽입하기 시작합니다.`\n    });\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        description: `${j + 2}번째 값을 오른쪽으로 이동합니다.`\n      });\n      j = j - 1;\n    }\n    arr[j + 1] = key;\n    steps.push({\n      array: [...arr],\n      activeIndices: [j + 1],\n      description: `${key}를 ${j + 2}번째 위치에 삽입했습니다.`\n    });\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst bubbleSort = arr => {\n  const steps = [];\n  const n = arr.length;\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        description: `${j + 1}번째 값(${arr[j]})과 ${j + 2}번째 값(${arr[j + 1]})을 비교합니다.`\n      });\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j + 1],\n          description: `${j + 1}번째 값과 ${j + 2}번째 값을 교환했습니다.`\n        });\n      }\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst mergeSort = arr => {\n  const steps = [];\n  const merge = (left, right) => {\n    let result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n      steps.push({\n        array: [...result, ...left.slice(leftIndex), ...right.slice(rightIndex)],\n        activeIndices: [result.length - 1],\n        description: `${result[result.length - 1]}을 결과 배열에 추가했습니다.`\n      });\n    }\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n  const mergeSortRecursive = arr => {\n    if (arr.length <= 1) return arr;\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n    steps.push({\n      array: [...arr],\n      activeIndices: [],\n      description: `배열을 ${left}와 ${right}로 나눕니다.`\n    });\n    return merge(mergeSortRecursive(left), mergeSortRecursive(right));\n  };\n  const sortedArray = mergeSortRecursive(arr);\n  steps.push({\n    array: sortedArray,\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst heapSort = arr => {\n  const steps = [];\n  const heapify = (n, i) => {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n    if (left < n && arr[left] > arr[largest]) {\n      largest = left;\n    }\n    if (right < n && arr[right] > arr[largest]) {\n      largest = right;\n    }\n    if (largest !== i) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, largest],\n        description: `${i + 1}번째 값과 ${largest + 1}번째 값을 교환합니다.`\n      });\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      heapify(n, largest);\n    }\n  };\n  const n = arr.length;\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(n, i);\n  }\n  for (let i = n - 1; i > 0; i--) {\n    steps.push({\n      array: [...arr],\n      activeIndices: [0, i],\n      description: `루트 노드와 마지막 노드를 교환합니다.`\n    });\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(i, 0);\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst quickSort = arr => {\n  const steps = [];\n  const partition = (low, high) => {\n    const pivot = arr[high];\n    steps.push({\n      array: [...arr],\n      activeIndices: [high],\n      description: `피벗으로 ${pivot}을 선택했습니다.`\n    });\n    let i = low - 1;\n    for (let j = low; j < high; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, high],\n        description: `${j + 1}번째 값(${arr[j]})과 피벗(${pivot})을 비교합니다.`\n      });\n      if (arr[j] < pivot) {\n        i++;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, j],\n          description: `${i + 1}번째 값과 ${j + 1}번째 값을 교환합니다.`\n        });\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n    steps.push({\n      array: [...arr],\n      activeIndices: [i + 1, high],\n      description: `피벗을 올바른 위치로 이동합니다.`\n    });\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n    return i + 1;\n  };\n  const quickSortRecursive = (low, high) => {\n    if (low < high) {\n      const pi = partition(low, high);\n      quickSortRecursive(low, pi - 1);\n      quickSortRecursive(pi + 1, high);\n    }\n  };\n  quickSortRecursive(0, arr.length - 1);\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst treeSort = arr => {\n  const steps = [];\n  class Node {\n    constructor(data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n    }\n  }\n  const insert = (root, key) => {\n    if (root === null) {\n      root = new Node(key);\n      steps.push({\n        array: [...arr],\n        activeIndices: [arr.indexOf(key)],\n        description: `${key}를 트리에 삽입합니다.`\n      });\n      return root;\n    }\n    if (key < root.data) {\n      root.left = insert(root.left, key);\n    } else if (key > root.data) {\n      root.right = insert(root.right, key);\n    }\n    return root;\n  };\n  const inorderTraversal = (root, result) => {\n    if (root !== null) {\n      inorderTraversal(root.left, result);\n      result.push(root.data);\n      steps.push({\n        array: [...result, ...arr.slice(result.length)],\n        activeIndices: [result.length - 1],\n        description: `${root.data}를 결과 배열에 추가합니다.`\n      });\n      inorderTraversal(root.right, result);\n    }\n  };\n  let root = null;\n  for (let i = 0; i < arr.length; i++) {\n    root = insert(root, arr[i]);\n  }\n  const sortedArr = [];\n  inorderTraversal(root, sortedArr);\n  steps.push({\n    array: sortedArr,\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n};\nconst timSort = arr => {\n  const steps = [];\n  const RUN = 32;\n  const n = arr.length;\n  for (let i = 0; i < n; i += RUN) {\n    insertionSort(arr, i, Math.min(i + RUN - 1, n - 1));\n  }\n  for (let size = RUN; size < n; size = 2 * size) {\n    for (let start = 0; start < n; start += 2 * size) {\n      const mid = start + size - 1;\n      const end = Math.min(start + 2 * size - 1, n - 1);\n      merge(arr, start, mid, end);\n    }\n  }\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n  return steps;\n  function insertionSort(arr, left, right) {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = arr[i];\n      let j = i - 1;\n      while (j >= left && arr[j] > temp) {\n        arr[j + 1] = arr[j];\n        j--;\n      }\n      arr[j + 1] = temp;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j + 1],\n        description: `${temp}를 ${j + 2}번째 위치에 삽입했습니다.`\n      });\n    }\n  }\n  function merge(arr, l, m, r) {\n    const len1 = m - l + 1,\n      len2 = r - m;\n    const left = new Array(len1),\n      right = new Array(len2);\n    for (let x = 0; x < len1; x++) {\n      left[x] = arr[l + x];\n    }\n    for (let x = 0; x < len2; x++) {\n      right[x] = arr[m + 1 + x];\n    }\n    let i = 0,\n      j = 0,\n      k = l;\n    while (i < len1 && j < len2) {\n      if (left[i] <= right[j]) {\n        arr[k] = left[i];\n        i++;\n      } else {\n        arr[k] = right[j];\n        j++;\n      }\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      k++;\n    }\n    while (i < len1) {\n      arr[k] = left[i];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      i++;\n      k++;\n    }\n    while (j < len2) {\n      arr[k] = right[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      j++;\n      k++;\n    }\n  }\n};\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","AlgorithmSelector","SortingVisualizer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","selectedAlgorithm","setSelectedAlgorithm","showPopup","setShowPopup","sortingSteps","setSortingSteps","currentStep","setCurrentStep","numbers","setNumbers","length","steps","generateSortingSteps","algorithm","arr","selectionSort","insertionSort","bubbleSort","mergeSort","heapSort","quickSort","treeSort","timSort","addNumber","num","prev","addRandomNumber","randomNum","Math","floor","random","className","children","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onKeyPress","e","key","parseInt","target","value","onClick","join","_c","n","i","minIdx","push","array","activeIndices","description","j","merge","left","right","result","leftIndex","rightIndex","slice","concat","mergeSortRecursive","mid","sortedArray","heapify","largest","partition","low","high","pivot","quickSortRecursive","pi","Node","constructor","data","insert","root","indexOf","inorderTraversal","sortedArr","RUN","min","size","start","end","temp","l","m","r","len1","len2","Array","x","k","$RefreshReg$"],"sources":["/Users/kjunh972/project/jun/Spring/variousSorting/variousSorting/src/main/frontend/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport AlgorithmSelector from './AlgorithmSelector';\nimport SortingVisualizer from './SortingVisualizer';\nimport './App.css';\n\nconst App = () => {\n  const [selectedAlgorithm, setSelectedAlgorithm] = useState('');\n  const [showPopup, setShowPopup] = useState(true);\n  const [sortingSteps, setSortingSteps] = useState([]);\n  const [currentStep, setCurrentStep] = useState(0);\n  const [numbers, setNumbers] = useState([]);\n\n  useEffect(() => {\n    if (selectedAlgorithm && numbers.length > 0) {\n      const steps = generateSortingSteps(selectedAlgorithm, [...numbers]);\n      setSortingSteps(steps);\n      setCurrentStep(0);\n    }\n  }, [selectedAlgorithm, numbers]);\n\n  const generateSortingSteps = (algorithm, arr) => {\n    switch (algorithm) {\n      case '선택 정렬': return selectionSort(arr);\n      case '삽입 정렬': return insertionSort(arr);\n      case '버블 정렬': return bubbleSort(arr);\n      case '병합 정렬': return mergeSort(arr);\n      case '힙 정렬': return heapSort(arr);\n      case '퀵 정렬': return quickSort(arr);\n      case '트리 정렬': return treeSort(arr);\n      case '팀 정렬': return timSort(arr);\n      default: return [];\n    }\n  };\n\n  const addNumber = (num) => {\n    setNumbers(prev => [...prev, num]);\n  };\n\n  const addRandomNumber = () => {\n    const randomNum = Math.floor(Math.random() * 100) + 1;\n    addNumber(randomNum);\n  };\n\n  return (\n    <div className=\"app\">\n      {showPopup && (\n        <AlgorithmSelector\n          onSelect={(algorithm) => {\n            setSelectedAlgorithm(algorithm);\n            setShowPopup(false);\n          }}\n        />\n      )}\n      {!showPopup && (\n        <>\n          <div className=\"number-input\">\n            <input\n              type=\"number\"\n              placeholder=\"숫자 입력\"\n              onKeyPress={(e) => {\n                if (e.key === 'Enter') {\n                  addNumber(parseInt(e.target.value));\n                  e.target.value = '';\n                }\n              }}\n            />\n            <button onClick={addRandomNumber}>랜덤 숫자 추가</button>\n          </div>\n          <div className=\"current-numbers\">\n            현재 숫자: {numbers.join(', ')}\n          </div>\n          <SortingVisualizer\n            algorithm={selectedAlgorithm}\n            steps={sortingSteps}\n            currentStep={currentStep}\n            setCurrentStep={setCurrentStep}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\n// 정렬 알고리즘 구현\nconst selectionSort = (arr) => {\n  const steps = [];\n  const n = arr.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    let minIdx = i;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      description: `${i + 1}번째 위치의 최소값을 찾기 시작합니다.`\n    });\n\n    for (let j = i + 1; j < n; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [minIdx, j],\n        description: `${minIdx + 1}번째 값(${arr[minIdx]})과 ${j + 1}번째 값(${arr[j]})을 비교합니다.`\n      });\n\n      if (arr[j] < arr[minIdx]) {\n        minIdx = j;\n        steps.push({\n          array: [...arr],\n          activeIndices: [minIdx],\n          description: `새로운 최소값 ${arr[minIdx]}을 ${minIdx + 1}번째 위치에서 찾았습니다.`\n        });\n      }\n    }\n\n    if (minIdx !== i) {\n      [arr[i], arr[minIdx]] = [arr[minIdx], arr[i]];\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, minIdx],\n        description: `${i + 1}번째 값과 ${minIdx + 1}번째 값을 교환했습니다.`\n      });\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst insertionSort = (arr) => {\n  const steps = [];\n  const n = arr.length;\n\n  for (let i = 1; i < n; i++) {\n    let key = arr[i];\n    let j = i - 1;\n    steps.push({\n      array: [...arr],\n      activeIndices: [i],\n      description: `${i + 1}번째 값 ${key}를 정렬된 부분에 삽입하기 시작합니다.`\n    });\n\n    while (j >= 0 && arr[j] > key) {\n      arr[j + 1] = arr[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        description: `${j + 2}번째 값을 오른쪽으로 이동합니다.`\n      });\n      j = j - 1;\n    }\n    arr[j + 1] = key;\n    steps.push({\n      array: [...arr],\n      activeIndices: [j + 1],\n      description: `${key}를 ${j + 2}번째 위치에 삽입했습니다.`\n    });\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst bubbleSort = (arr) => {\n  const steps = [];\n  const n = arr.length;\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = 0; j < n - i - 1; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, j + 1],\n        description: `${j + 1}번째 값(${arr[j]})과 ${j + 2}번째 값(${arr[j + 1]})을 비교합니다.`\n      });\n\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        steps.push({\n          array: [...arr],\n          activeIndices: [j, j + 1],\n          description: `${j + 1}번째 값과 ${j + 2}번째 값을 교환했습니다.`\n        });\n      }\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst mergeSort = (arr) => {\n  const steps = [];\n\n  const merge = (left, right) => {\n    let result = [];\n    let leftIndex = 0;\n    let rightIndex = 0;\n\n    while (leftIndex < left.length && rightIndex < right.length) {\n      if (left[leftIndex] < right[rightIndex]) {\n        result.push(left[leftIndex]);\n        leftIndex++;\n      } else {\n        result.push(right[rightIndex]);\n        rightIndex++;\n      }\n      steps.push({\n        array: [...result, ...left.slice(leftIndex), ...right.slice(rightIndex)],\n        activeIndices: [result.length - 1],\n        description: `${result[result.length - 1]}을 결과 배열에 추가했습니다.`\n      });\n    }\n\n    return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\n  };\n\n  const mergeSortRecursive = (arr) => {\n    if (arr.length <= 1) return arr;\n\n    const mid = Math.floor(arr.length / 2);\n    const left = arr.slice(0, mid);\n    const right = arr.slice(mid);\n\n    steps.push({\n      array: [...arr],\n      activeIndices: [],\n      description: `배열을 ${left}와 ${right}로 나눕니다.`\n    });\n\n    return merge(mergeSortRecursive(left), mergeSortRecursive(right));\n  };\n\n  const sortedArray = mergeSortRecursive(arr);\n  steps.push({\n    array: sortedArray,\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst heapSort = (arr) => {\n  const steps = [];\n\n  const heapify = (n, i) => {\n    let largest = i;\n    const left = 2 * i + 1;\n    const right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest]) {\n      largest = left;\n    }\n\n    if (right < n && arr[right] > arr[largest]) {\n      largest = right;\n    }\n\n    if (largest !== i) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [i, largest],\n        description: `${i + 1}번째 값과 ${largest + 1}번째 값을 교환합니다.`\n      });\n\n      [arr[i], arr[largest]] = [arr[largest], arr[i]];\n      heapify(n, largest);\n    }\n  };\n\n  const n = arr.length;\n\n  for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {\n    heapify(n, i);\n  }\n\n  for (let i = n - 1; i > 0; i--) {\n    steps.push({\n      array: [...arr],\n      activeIndices: [0, i],\n      description: `루트 노드와 마지막 노드를 교환합니다.`\n    });\n\n    [arr[0], arr[i]] = [arr[i], arr[0]];\n    heapify(i, 0);\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst quickSort = (arr) => {\n  const steps = [];\n\n  const partition = (low, high) => {\n    const pivot = arr[high];\n    steps.push({\n      array: [...arr],\n      activeIndices: [high],\n      description: `피벗으로 ${pivot}을 선택했습니다.`\n    });\n\n    let i = low - 1;\n\n    for (let j = low; j < high; j++) {\n      steps.push({\n        array: [...arr],\n        activeIndices: [j, high],\n        description: `${j + 1}번째 값(${arr[j]})과 피벗(${pivot})을 비교합니다.`\n      });\n\n      if (arr[j] < pivot) {\n        i++;\n        steps.push({\n          array: [...arr],\n          activeIndices: [i, j],\n          description: `${i + 1}번째 값과 ${j + 1}번째 값을 교환합니다.`\n        });\n        [arr[i], arr[j]] = [arr[j], arr[i]];\n      }\n    }\n\n    steps.push({\n      array: [...arr],\n      activeIndices: [i + 1, high],\n      description: `피벗을 올바른 위치로 이동합니다.`\n    });\n    [arr[i + 1], arr[high]] = [arr[high], arr[i + 1]];\n\n    return i + 1;\n  };\n\n  const quickSortRecursive = (low, high) => {\n    if (low < high) {\n      const pi = partition(low, high);\n      quickSortRecursive(low, pi - 1);\n      quickSortRecursive(pi + 1, high);\n    }\n  };\n\n  quickSortRecursive(0, arr.length - 1);\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst treeSort = (arr) => {\n  const steps = [];\n\n  class Node {\n    constructor(data) {\n      this.data = data;\n      this.left = null;\n      this.right = null;\n    }\n  }\n\n  const insert = (root, key) => {\n    if (root === null) {\n      root = new Node(key);\n      steps.push({\n        array: [...arr],\n        activeIndices: [arr.indexOf(key)],\n        description: `${key}를 트리에 삽입합니다.`\n      });\n      return root;\n    }\n\n    if (key < root.data) {\n      root.left = insert(root.left, key);\n    } else if (key > root.data) {\n      root.right = insert(root.right, key);\n    }\n\n    return root;\n  };\n\n  const inorderTraversal = (root, result) => {\n    if (root !== null) {\n      inorderTraversal(root.left, result);\n      result.push(root.data);\n      steps.push({\n        array: [...result, ...arr.slice(result.length)],\n        activeIndices: [result.length - 1],\n        description: `${root.data}를 결과 배열에 추가합니다.`\n      });\n      inorderTraversal(root.right, result);\n    }\n  };\n\n  let root = null;\n  for (let i = 0; i < arr.length; i++) {\n    root = insert(root, arr[i]);\n  }\n\n  const sortedArr = [];\n  inorderTraversal(root, sortedArr);\n\n  steps.push({\n    array: sortedArr,\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n};\n\nconst timSort = (arr) => {\n  const steps = [];\n  const RUN = 32;\n  const n = arr.length;\n\n  for (let i = 0; i < n; i += RUN) {\n    insertionSort(arr, i, Math.min((i + RUN - 1), (n - 1)));\n  }\n\n  for (let size = RUN; size < n; size = 2 * size) {\n    for (let start = 0; start < n; start += 2 * size) {\n      const mid = start + size - 1;\n      const end = Math.min((start + 2 * size - 1), (n - 1));\n      merge(arr, start, mid, end);\n    }\n  }\n\n  steps.push({\n    array: [...arr],\n    activeIndices: [],\n    description: '정렬이 완료되었습니다.'\n  });\n\n  return steps;\n\n  function insertionSort(arr, left, right) {\n    for (let i = left + 1; i <= right; i++) {\n      const temp = arr[i];\n      let j = i - 1;\n      while (j >= left && arr[j] > temp) {\n        arr[j + 1] = arr[j];\n        j--;\n      }\n      arr[j + 1] = temp;\n      steps.push({\n        array: [...arr],\n        activeIndices: [j + 1],\n        description: `${temp}를 ${j + 2}번째 위치에 삽입했습니다.`\n      });\n    }\n  }\n\n  function merge(arr, l, m, r) {\n    const len1 = m - l + 1, len2 = r - m;\n    const left = new Array(len1), right = new Array(len2);\n    for (let x = 0; x < len1; x++) {\n      left[x] = arr[l + x];\n    }\n    for (let x = 0; x < len2; x++) {\n      right[x] = arr[m + 1 + x];\n    }\n\n    let i = 0, j = 0, k = l;\n\n    while (i < len1 && j < len2) {\n      if (left[i] <= right[j]) {\n        arr[k] = left[i];\n        i++;\n      } else {\n        arr[k] = right[j];\n        j++;\n      }\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      k++;\n    }\n\n    while (i < len1) {\n      arr[k] = left[i];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      i++;\n      k++;\n    }\n\n    while (j < len2) {\n      arr[k] = right[j];\n      steps.push({\n        array: [...arr],\n        activeIndices: [k],\n        description: `${arr[k]}를 ${k + 1}번째 위치에 병합했습니다.`\n      });\n      j++;\n      k++;\n    }\n  }\n};\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}